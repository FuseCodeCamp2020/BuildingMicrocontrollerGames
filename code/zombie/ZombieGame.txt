/**
 * Zombie game
 * 
 * Press A+B to enter master mode (1 per game)
 *
 * Wait for players to be paired. The number of paired player will display on screen.
 * An icon will appear on player's screen.
 * 
 * Press A+B to start the zombie game. The master will pick two players as zombies.
 *
 * TODO: rest of game rules here
 * 
 * The master can also press A+B again to stop the game.
 * 
 * 
 * Icons used in the game:
 * 
 * Pairing: IconNames.Ghost,7
 * Paired: IconNames.Happy,
 * Dead: IconNames.Skull,
 * Sick: IconNames.Sad,
 * Incubating: IconNames.Confused,
 * Healthy: IconNames.Happy
 * 
 */

const RSSI = -45; // db

enum GameState {
    Stopped,
    Pairing,
    Running,
    Over
}


const GameIcons = {
    Pairing: IconNames.Ghost,
    Paired: IconNames.Happy,
    Dead: IconNames.Skull,
    Healthy: IconNames.Happy
}

const playerIcons = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
class Player {
    id: number;
    icon: number;
    team: number;
    show() {
        basic.showString(playerIcons[this.icon]);
    }
}

// common state
let state = GameState.Stopped;

// master state
let master = false;
const players: Player[] = [];

// player state
let paired = false;
let playerIcon = -1; // player icon and identity

// get a player instance (creates one as needed)
function player(id: number): Player {
    for (const p of players)
        if (p.id == id) return p;

    // add player to game
    let p = new Player();
    p.id = id;
    p.icon = (players.length + 1) % playerIcons.length;

    players.push(p);
    return p;
}


function gameOver() {
    state = GameState.Over;
}

function gameFace() {
    switch (state) {
        case GameState.Stopped:
            basic.showIcon(GameIcons.Pairing);
            break;
        case GameState.Pairing:
            if (playerIcon > -1)
                basic.showString(playerIcons[playerIcon]);
            else
                basic.showIcon(paired ? GameIcons.Paired : GameIcons.Pairing, 1);
            break;
        case GameState.Running:
            basic.showString(playerIcons[playerIcon]);
            break;
        case GameState.Over:
            // show id
            basic.showString(playerIcons[playerIcon]);
            basic.pause(2000);
            // TODO: show zombies
            //
            // // show how infected
            // if (infectedBy > -1) {
            //     basic.showString(" INFECTED BY");
            //     basic.showString(playerIcons[infectedBy]);
            //     basic.pause(2000);
            // } else {
            //     basic.showString(" PATIENT ZERO");
            //     basic.pause(2000);
            // }
            // show score
            game.showScore();
            basic.pause(1000);
            break;
    }
}

// master button controller
input.onButtonPressed(Button.AB, () => {
    // register as master
    if (state == GameState.Stopped && !master) {
        master = true;
        paired = true;
        state = GameState.Pairing;
        radio.setTransmitPower(7); // beef up master signal
        //TODO???
        basic.showString("0");
        return;
    }

    if (!master) return; // master only beyond this

    // launch game
    if (state == GameState.Pairing) {
        // pick 1 player and infect him
        // patientZero = players[Math.random(players.length)];
        // while (patientZero.health == HealthState.Healthy) {
        //     radio.sendValue("infect", patientZero.id);
        //     basic.pause(100);
        // }

        // all ready
        state = GameState.Running;
        serial.writeLine(`game started ${players.length} players`);

        //TODO???
        // show startup
        basic.showIcon(GameIcons.Dead);
    } // end game 
    else if (state == GameState.Running) {
        gameOver();
    }
})

radio.setGroup(42);
radio.setTransmitSerialNumber(true)
radio.onDataPacketReceived(({ time, receivedNumber, receivedString, signal, serial: id }) => {
    if (master) {
        if (receivedString == "pair") {
            // register player
            let n = players.length;
            let p = player(id);
            // show player number if changed
            if (n != players.length) {
                led.stopAnimation();
                basic.showNumber(players.length);
            }
        }
        //TODO: anything?
        // else if (receivedString == "health") {
        //     let p = player(id);
        //     p.health = receivedNumber;
        //     // check if all infected
        //     if (allDead())
        //         gameOver();
        // }
    } else {
        if (receivedString == "state") {
            // update game state
            state = receivedNumber as GameState;
        }

        //TODO:  TEAM JOINING STUFF

        // } else if (infectedBy < 0 &&
        //     receivedString == "infect"
        //     && receivedNumber == control.deviceSerialNumber()) {
        //     // infected by master
        //     infectedBy = 0; // infected my master
        //     infectedTime = input.runningTime();
        //     health = HealthState.Incubating;
        //     serial.writeLine(`infected ${control.deviceSerialNumber()}`);
        // }
        // if (receivedString == "h" + control.deviceSerialNumber().toString() &&
        //     health < receivedNumber) {
        //     health = receivedNumber;
        // }
        switch (state) {
            case GameState.Pairing:
                // medium range in pairing mode
                if (!paired &&
                    receivedString == "paired"
                    && receivedNumber == control.deviceSerialNumber()) {
                    // paired!
                    paired = true;
                    return;
                }
                else if (paired && receivedString == "i" + control.deviceSerialNumber().toString()) {
                    playerIcon = receivedNumber;
                }
                break;
            case GameState.Running:
                //TODO: anything?
                // // broadcast infection status
                // if (health == HealthState.Healthy && receivedString == "transmit") {
                //     serial.writeLine(`signal: ${signal}`);
                //     if (signal > RSSI &&
                //         Math.random(100) > TRANSMISSIONPROB) {
                //         infectedBy = receivedNumber;
                //         infectedTime = input.runningTime();
                //         health = HealthState.Incubating;
                //     }
                // } else if (health != HealthState.Dead
                //     && receivedString == "health" && signal > RSSI) {
                //     game.addScore(1);
                // }
                break;
        }
    }
})

// main game loop
basic.forever(() => {
    if (master) {
        switch (state) {
            case GameState.Pairing:
                // tell each player they are registered
                for (const p of players) {
                    radio.sendValue("paired", p.id);
                    radio.sendValue("i" + p.id, p.icon);
                }
                basic.pause(500);
                break;
            case GameState.Running:
                // TODO: anything?
                // for (const p of players) {
                //     radio.sendValue("h" + p.id, p.health);
                // }
                break;
            case GameState.Over:
                //TODO: anything?
                break;
        }
        radio.sendValue("state", state); // keep broadcasting the game state
    } else { // player loop
        switch (state) {
            case GameState.Pairing:
                // broadcast player id
                if (playerIcon < 0) {
                    radio.sendValue("pair", control.deviceSerialNumber());
                }
                // else if (infectedBy > -1)
                //     radio.sendValue("health", health);
                break;
            case GameState.Running:
                //TODO: broadcast team joining beacon?
                // update health status
                // if (health != HealthState.Healthy && input.runningTime() - infectedTime > DEATH)
                //     health = HealthState.Dead;
                // else if (health != HealthState.Healthy && input.runningTime() - infectedTime > INCUBATION)
                //     health = HealthState.Sick;
                // // transmit disease
                // if (health == HealthState.Incubating || health == HealthState.Sick)
                //     radio.sendValue("transmit", playerIcon);
                // radio.sendValue("health", health);
                break;
        }
        // show current animation
        gameFace();
    }
})


basic.showIcon(GameIcons.Pairing)

