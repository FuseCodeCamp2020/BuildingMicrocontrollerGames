/**
 * Zombie game
 * 
 * Press A+B to enter master mode (1 per game)
 *
 * Wait for players to be paired. The number of paired player will display on screen.
 * An icon will appear on player's screen.
 * 
 * Press A+B to start the zombie game. The master will pick two players as zombies.
 *
 * TODO: rest of game rules here
 * 
 * The master can also press A+B again to stop the game.
 * 
 * 
 * Icons used in the game:
 * 
 * Pairing: IconNames.Ghost,7
 * Paired: IconNames.Happy,
 * Zombie: IconNames.Skull,
 * 
 */

const RSSI = -45; // db

enum GameState {
    Stopped,
    Pairing,
    Running,
    Over
}

enum TeamState {
    Unjoined,
    AwaitingAcknowledgement,
    Joined
}

const GameIcons = {
    Pairing: IconNames.Ghost,
    Paired: IconNames.Happy,
    Zombie: IconNames.Skull
}

const playerIcons = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
class Player {
    id: number;
    icon: number;
    isZombie: boolean;
    show() {
        basic.showString(playerIcons[this.icon]);
    }
}

// common state
let state = GameState.Stopped;

// master state
let master = false;
const players: Player[] = [];

// player state
let paired = false;
let playerIcon = -1; // player icon and identity
let infectedBy = -1; // who infected (playerIcon)
let hasChangedTeams = false;

// get a player instance (creates one as needed)
function player(id: number): Player {
    for (const p of players)
        if (p.id == id) return p;

    // add player to game
    let p = new Player();
    p.id = id;
    p.icon = (players.length + 1) % playerIcons.length;

    players.push(p);
    return p;
}


function gameOver() {
    serial.writeLine(`game ended with ${countZombies()} zombies out of ${players.length} players`);
    state = GameState.Over;
}

function countZombies(): number {
    let count = 0;
    for (const p of players)
        if (p.isZombie) count++;
    return count;
}

function isTeamMajority(): boolean {
    //TODO check for any team majority; need to collect players into groups of teams and count the team members
    //need to print out to serial the count of each team and whether they are zombies
    return countZombies() > players.length/2;
}

function gameFace() {
    switch (state) {
        case GameState.Stopped:
            basic.showIcon(GameIcons.Pairing);
            break;
        case GameState.Pairing:
            if (playerIcon > -1)
                basic.showString(playerIcons[playerIcon]);
            else
                basic.showIcon(paired ? GameIcons.Paired : GameIcons.Pairing, 1);
            break;
        case GameState.Running:
            basic.showString(playerIcons[playerIcon]);
            break;
        case GameState.Over:
            // show id
            basic.showString(playerIcons[playerIcon]);
            basic.pause(2000);

            // show how infected
            if (infectedBy > 0) {
                basic.showString(" INFECTED BY");
                basic.showString(playerIcons[infectedBy]);
            } else if (infectedBy==0) {
                basic.showString(" PATIENT ZERO");
            } else{
                basic.showString(" SURVIVOR!");
            }
            basic.pause(2000);

            // show score
            //TODO: show who won?
            //basic.pause(1000);
            break;
    }
}

// master button controller
input.onButtonPressed(Button.AB, () => {
    // register as master
    if (state == GameState.Stopped && !master) {
        master = true;
        paired = true;
        state = GameState.Pairing;
        radio.setTransmitPower(7); // beef up master signal
        basic.showString("0");
        return;
    }

    if (!master) return; // master only beyond this

    // launch game, as we were in pairing mode and AB was pressed again
    if (state == GameState.Pairing) {
        if (players.length < 2) {
            serial.writeLine(`Need at least 2 players to start and only have ${players.length}!`);
            return;
        }

        // pick 2 players and make them zombies
        while (countZombies() < 2) {
            let ind = Math.random(players.length);
            if (!players[ind].isZombie) {
                players[ind].isZombie = true;
                //broadcast infection
                radio.sendValue("infect", players[ind].id);
                basic.pause(100);
            }
        }

        // all ready
        state = GameState.Running;
        serial.writeLine(`game started ${players.length} players`);

        // show startup
        basic.showString(countZombies() + "")
    } // end game as we were running and AB was pressed again
    else if (state == GameState.Running) {
        gameOver();
    }
})

radio.setGroup(40);
radio.setTransmitSerialNumber(true)
radio.onDataPacketReceived(({ time, receivedNumber, receivedString, signal, serial: id }) => {
    if (master) {
        if (receivedString == "pair") {
            // register player
            let n = players.length;
            let p = player(id);
            // show player number if changed
            if (n != players.length) {
                led.stopAnimation();
                basic.showNumber(players.length);
            }

            //TODO: remove this stuff and just process team join info here, 
            //then need to update zombie state of each member of each team if at least one of the memmbers is a zombie
        } else if (receivedString == "zombie") {
            player(id).isZombie = true;
            player(id).icon = receivedNumber;
        } else if (receivedString == "human") {
            player(id).icon = receivedNumber;
        }

        //  finally check if majority infected
        if (isTeamMajority()) {
            gameOver();
        }

    } else {
        if (receivedString == "state") {
            // update game state
            state = receivedNumber as GameState;
        } else if (infectedBy < 0 && receivedString == "infect"
            && receivedNumber == control.deviceSerialNumber()) {
            // infected by master
            infectedBy = 0;
            serial.writeLine(`infected ${control.deviceSerialNumber()}`);
        }

        switch (state) {
            case GameState.Pairing:
                // medium range in pairing mode
                if (!paired &&
                    receivedString == "paired"
                    && receivedNumber == control.deviceSerialNumber()) {
                    // paired!
                    paired = true;
                    return;
                }
                else if (paired && receivedString == "i" + control.deviceSerialNumber().toString()) {
                    playerIcon = receivedNumber;
                }
                break;
            case GameState.Running:
                //TODO:  TEAM JOINING STUFF
                //if TeamState is unjoined and button B is pressed and signal strength is high, join team (update local state to pending and broadcast)
                // update TeamState to joined if master confirmation message

                //TODO: anything?
                // // broadcast infection status
                // if (health == HealthState.Healthy && receivedString == "zombie") {
                //     serial.writeLine(`signal: ${signal}`);
                //     if (signal > RSSI &&
                //         Math.random(100) > TRANSMISSIONPROB) {
                //         infectedBy = receivedNumber;
                //         infectedTime = input.runningTime();
                //         health = HealthState.Incubating;
                //     }
                // } else if (health != HealthState.Dead
                //     && receivedString == "health" && signal > RSSI) {
                //     game.addScore(1);
                // }
                break;
        }
    }
})

// main game loop
basic.forever(() => {
    if (master) {
        switch (state) {
            case GameState.Pairing:
                // tell each player they are registered
                for (const p of players) {
                    radio.  Value("paired", p.id);
                    radio.sendValue("i" + p.id, p.icon);
                }
                basic.pause(500);
                break;
            case GameState.Running:
                // TODO: broadcast zombie status of each player?
                // for (const p of players) {
                //     radio.sendValue("h" + p.id, p.health);
                // }
                break;
            case GameState.Over:
                //TODO: anything?
                break;
        }
        radio.sendValue("state", state); // keep broadcasting the game state
    } else { // player loop
        switch (state) {
            case GameState.Pairing:
                // broadcast player id
                if (playerIcon < 0) {
                    radio.sendValue("pair", control.deviceSerialNumber());
                }

                //TODO: anything here?
                // else if (infectedBy > -1)
                //     radio.sendValue("health", health);
                break;
            case GameState.Running:
                //TODO: if A is pressed and TeamState is Unjoined, broadcast join beacon instead of doing this?
                //broadcast team, as either human or zombie depending on infection status
                if (infectedBy < 0) {
                    radio.sendValue("human", playerIcon);
                } else {
                    radio.sendValue("zombie", playerIcon);
                }

                break;
        }
        // show current animation
        gameFace();
    }
})


basic.showIcon(GameIcons.Pairing)

